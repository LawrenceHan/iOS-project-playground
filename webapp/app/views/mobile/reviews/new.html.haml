= navigation_bar(title: @reviewable.name)

= form_for [:mobile, @review], as: :review do |f|
  - if @medication
    #medication-questions
      .field-group
        %label= t('review.dosage')
        = f.text_field :dosage_count, class: 'primary', placeholder: t('review.optional')
        = f.select :dosage_unit, dosage_units, {}, class: 'secondary'
      .field-group
        %label= t('review.frequency')
        = f.select :intake_frequency, intake_frequencies, {}, class: 'full'
      .field-group
        %label= t('review.duration')
        = f.text_field :duration_count, class: 'primary'
        = f.select :duration_unit, duration_units, {}, class: 'secondary'

  #questions.collapsed
    - required_questions.each_with_index do |question, i|
      = render partial: 'question', locals: { question: question, is_first: i == 0 }
    - optional_questions.each_with_index do |question, i|
      = render partial: 'question', locals: { question: question, is_first: false }



  .button-wrapper
    = f.text_area :note, rows: 4, placeholder: t('review.your_thoughts')
    - if optional_questions.present?
      = action_button t('review.more_questions'), href: 'javascript:', opts: { id: 'more-questions' }
    = action_button t('common.submit'), form: f


- content_for :javascript do
  :javascript
    $(function() {
      var Descriptions = ['', "#{t('review.unsatisfactory')}", "#{t('review.adequate')}", "#{t('review.satisfactory')}", "#{t('review.good')}", "#{t('review.excellent')}"];


      function setStars($this, $stars, mouseX) {
        var rating = 0;
        $stars.each(function() {
          var $this = $(this);
          if ($this.data('center') < mouseX) {
            $this.removeClass('off').addClass('on');
            rating++;
          } else {
            $this.removeClass('on').addClass('off');
          }
        });

        $this.siblings('.title').find('.rating-description').text(Descriptions[rating]);

        return rating;
      }


      $('.rating-stars').mousedown(function() {
        var $this = $(this);
        var $stars = $this.find('.rating-star');

        var offset = $this.offset();
        var containerX = offset.left;
        var centersOfStars = $stars.each(function() {
          var $this = $(this);
          $this.data('center', ($this.offset().left - containerX));
        });
        var $input = $this.find('input');

        $this.mousemove(function(event) {
          var x = event.clientX - containerX;
          var rating = setStars($this, $stars, x);
          $input.val(rating);
        });
      }).mouseup(function(event) {
        var $this = $(this);
        var $stars = $this.find('.rating-star');

        var offset = $this.offset();
        var containerX = offset.left;
        var x = event.clientX - containerX;
        var rating = setStars($this, $stars, x);
        $this.find('input').val(rating);

        $(this).off('mousemove');
      });

      var $questions = $('#questions');
      $('#more-questions').click(function() {
        $(this).hide();
        $questions.removeClass('collapsed');
      });


      $('button[type=submit]').on('click', function(e) {
        e.preventDefault();
        var invalid = false;
        $(".new_review").find('.question-cell:not(.optional) input').each(function() {
          if (!$(this).val()) {
            invalid = true;
            return false;
          }
        });

        if (invalid) {
          showNotification("#{t('review.fill_the_required_fields')}");
        } else {
          showConfirmation("#{t('review.acknowledge_accuracy')}");
          $('#confirmationModal .btn-ensure').off("click").on("click", function(){
            $("#new_review").submit();
          });
        }

      });

    });
